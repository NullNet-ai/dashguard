/** @type {import('eslint').Linter.Config} */
const config = {
    ignorePatterns: ['scripts/**/*', 'public/**/*', '.eslintrc*'],
    parser: '@typescript-eslint/parser',
    parserOptions: {
      project: true,
    },
    plugins: ['@typescript-eslint', '@stylistic', 'react', 'jsx-a11y', 'import'],
    extends: [
      'next/core-web-vitals',
      'plugin:@typescript-eslint/recommended-type-checked',
      'plugin:@typescript-eslint/stylistic-type-checked',
      'plugin:@stylistic/recommended-extends',
      'plugin:@stylistic/disable-legacy',
      'plugin:jsx-a11y/recommended',
      'plugin:import/errors',
      'plugin:import/warnings',
      'plugin:react/recommended',
      'eslint:recommended',
      'prettier',
    ],
    rules: {
      '@stylistic/array-bracket-newline': ['warn', 'consistent'],
      '@stylistic/arrow-spacing': ['error', { before: true, after: true }],
      '@stylistic/curly-newline': ['error', 'always'],
      '@stylistic/function-call-argument-newline': ['error', 'never'],
      '@stylistic/function-call-spacing': ['error', 'never'],
      '@stylistic/implicit-arrow-linebreak': 'error',
      '@stylistic/line-comment-position': 'error',
      '@stylistic/max-len': 'error',
      '@stylistic/newline-per-chained-call': 'error',
      '@stylistic/no-extra-semi': 'error',
      '@stylistic/nonblock-statement-body-position': 'error',
      '@stylistic/rest-spread-spacing': ['error', 'never'],
      '@stylistic/semi': 'error',
      '@stylistic/switch-colon-spacing': 'error',
      '@stylistic/template-curly-spacing': ['error', 'never'],
      '@typescript-eslint/array-type': 'off',
      '@typescript-eslint/consistent-indexed-object-style': 'off',
      '@typescript-eslint/consistent-type-definitions': 'error',
      '@typescript-eslint/consistent-type-imports': [
        'error',
        {
          fixStyle: 'inline-type-imports',
        },
      ],
      '@typescript-eslint/no-explicit-any': 'off',
      '@typescript-eslint/no-floating-promises': 'error',
      '@typescript-eslint/no-misused-promises': 'error',
      '@typescript-eslint/no-non-null-asserted-optional-chain': 'error',
      '@typescript-eslint/no-unnecessary-type-assertion': 'off',
      '@typescript-eslint/no-unsafe-argument': 'off',
      '@typescript-eslint/no-unsafe-assignment': 'error',
      '@typescript-eslint/no-unsafe-call': 'error',
      '@typescript-eslint/no-unsafe-member-access': 'off',
      '@typescript-eslint/no-unsafe-return': 'error',
      '@typescript-eslint/no-unused-expressions': 'off',
      '@typescript-eslint/no-unused-vars': [
        'error',
        {
          argsIgnorePattern: '^_',
          varsIgnorePattern: '^_',
        },
      ],
      '@typescript-eslint/non-nullable-type-assertion-style': 'off',
      '@typescript-eslint/only-throw-error': 'off',
      '@typescript-eslint/prefer-nullish-coalescing': 'off',
      '@typescript-eslint/prefer-optional-chain': 'error',
      '@typescript-eslint/require-await': 'off',
      '@typescript-eslint/restrict-template-expressions': 'off',
      '@typescript-eslint/unbound-method': 'off',
      'no-console': ['error', { allow: ['warn', 'error', 'info'] }],
      'no-duplicate-imports': 'error',
      'no-var': 'error',
      'object-shorthand': ['error', 'always'],
      'prefer-arrow-callback': 'error',
      'prefer-const': 'error',
      'prefer-destructuring': [
        'error',
        {
          VariableDeclarator: {
            array: true,
            object: true,
          },
          AssignmentExpression: {
            array: true,
            object: true,
          },
        },
        {
          enforceForRenamedProperties: true,
        },
      ],
      'prefer-template': 'error',
      'react/destructuring-assignment': ['error', 'never'],
      'react/hook-use-state': ['error', { allowDestructuredState: false }],
      'react/jsx-boolean-value': ['error', 'always'],
      'react/jsx-closing-bracket-location': ['error', 'after-props'],
      'react/jsx-closing-tag-location': ['error', 'line-aligned'],
      'react/jsx-curly-brace-presence': ['error', 'always'],
      'react/jsx-curly-spacing': ['error', 'always'],
      'react/jsx-equals-spacing': ['error', 'always'],
      'react/jsx-first-prop-new-line': 'error',
      'react/jsx-fragments': ['error', 'syntax'],
      'react/jsx-handler-names': [
        'error',
        {
          eventHandlerPrefix: 'handle',
          eventHandlerPropPrefix: 'on',
          checkLocalVariables: false,
          checkInlineFunction: true,
        },
      ],
      'react/jsx-indent': ['error', 2, { indentLogicalExpressions: true }],
      'react/jsx-indent-props': ['error', 2],
      'react/jsx-no-constructed-context-values': 'error',
      'react/jsx-no-useless-fragment': 'error',
      'react/jsx-pascal-case': ['error', { allowNamespace: true }],
      'jsx-props-no-multi-spaces': 'error',
      'react/jsx-props-no-spread-multi': 'error',
      'react/jsx-sort-props': [
        'error',
        {
          callbacksLast: true,
          shorthandFirst: true,
          ignoreCase: true,
          noSortAlphabetically: false,
        },
      ],
      'react/jsx-tag-spacing': [
        'error',
        {
          beforeSelfClosing: 'always',
        },
      ],
      'react/jsx-wrap-multilines': [
        'error',
        {
          declaration: 'parens-new-line',
          assignment: 'parens-new-line',
          return: 'parens-new-line',
          arrow: 'parens-new-line',
          condition: 'parens',
          logical: 'parens-new-line',
          prop: 'ignore',
        },
      ],
      'react/no-array-index-key': 'error',
      'react/no-unstable-nested-components': 'error',
      'react/self-closing-comp': [
        'error',
        {
          component: true,
          html: true,
        },
      ],
    },
  };
  module.exports = config;
  