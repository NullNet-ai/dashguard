/** @type {import("eslint").Linter.Config} */
const config = {
  ignorePatterns: ['scripts/**/*', 'public/**/*', '.eslintrc*', 'prettier.config.js', 'src/components/**/**/*'],
  parser: '@typescript-eslint/parser',
  parserOptions: {
    project: true,
  },
  plugins: ['@typescript-eslint', '@stylistic', 'react', 'jsx-a11y', 'import'],
  extends: [
    'next/core-web-vitals',
    'plugin:@typescript-eslint/recommended-type-checked',
    'plugin:@typescript-eslint/stylistic-type-checked',
    'plugin:@stylistic/recommended-extends',
    'plugin:@stylistic/disable-legacy',
    'plugin:jsx-a11y/recommended',
    'plugin:import/errors',
    'plugin:import/warnings',
    'plugin:react/recommended',
    'eslint:recommended',
    'prettier',
  ],
  overrides: [
    {
      files: ['src/**/*'],
      rules: {
        '@stylistic/array-bracket-newline': ['warn', 'consistent'],
        '@stylistic/arrow-spacing': ['error', { before: true, after: true }],
        '@stylistic/curly-newline': ['warn', 'always'],
        '@stylistic/function-call-argument-newline': ['error', 'never'],
        '@stylistic/function-call-spacing': ['error', 'never'],
        '@stylistic/implicit-arrow-linebreak': 'error',
        '@stylistic/jsx-quotes': ['warn', 'prefer-single'],
        '@stylistic/line-comment-position': 'error',
        '@stylistic/max-len': 'warn',
        '@stylistic/newline-per-chained-call': 'warn',
        '@stylistic/no-extra-semi': 'error',
        '@stylistic/nonblock-statement-body-position': 'warn',
        '@stylistic/rest-spread-spacing': ['error', 'never'],
        '@stylistic/semi': 'warn',
        '@stylistic/switch-colon-spacing': 'error',
        '@stylistic/template-curly-spacing': ['error', 'never'],
        '@typescript-eslint/array-type': 'off',
        '@typescript-eslint/consistent-indexed-object-style': 'off',
        '@typescript-eslint/consistent-type-definitions': 'warn',
        '@typescript-eslint/consistent-type-imports': [
          'warn',
          {
            fixStyle: 'inline-type-imports',
          },
        ],
        '@typescript-eslint/no-empty-function': 'warn',
        '@typescript-eslint/no-explicit-any': 'off',
        '@typescript-eslint/no-floating-promises': 'error',
        '@typescript-eslint/no-misused-promises': 'error',
        '@typescript-eslint/no-non-null-asserted-optional-chain': 'error',
        '@typescript-eslint/no-unnecessary-type-assertion': 'off',
        '@typescript-eslint/no-unsafe-argument': 'off',
        '@typescript-eslint/no-unsafe-assignment': 'warn',
        '@typescript-eslint/no-unsafe-call': 'warn',
        '@typescript-eslint/no-unsafe-member-access': 'off',
        '@typescript-eslint/no-unsafe-return': 'warn',
        '@typescript-eslint/no-unused-expressions': 'off',
        '@typescript-eslint/no-unused-vars': [
          'warn',
          {
            argsIgnorePattern: '^_',
            varsIgnorePattern: '^_',
          },
        ],
        '@typescript-eslint/non-nullable-type-assertion-style': 'off',
        '@typescript-eslint/only-throw-error': 'off',
        '@typescript-eslint/prefer-nullish-coalescing': 'off',
        '@typescript-eslint/prefer-optional-chain': 'warn',
        '@typescript-eslint/require-await': 'off',
        '@typescript-eslint/restrict-template-expressions': 'off',
        '@typescript-eslint/unbound-method': 'off',
        'import/order': [
          'error',
          {
            'groups': [
              'builtin',
              'external',
              'internal',
              'parent',
              'sibling',
              'index',
            ],
            'newlines-between': 'always',
            'alphabetize': { order: 'asc', caseInsensitive: true },
          },
        ],
        'no-console': ['error', { allow: ['warn', 'error', 'info'] }],
        'no-duplicate-imports': 'error',
        'no-var': 'error',
        'object-shorthand': ['error', 'always'],
        'prefer-arrow-callback': 'error',
        'prefer-const': 'error',
        'prefer-destructuring': [
          'warn',
          {
            VariableDeclarator: {
              array: true,
              object: true,
            },
            AssignmentExpression: {
              array: true,
              object: true,
            },
          },
          {
            enforceForRenamedProperties: true,
          },
        ],
        'react/boolean-prop-naming': 'error',
        'react/destructuring-assignment': ['error', 'always'],
        'react/jsx-boolean-value': ['warn', 'always'],
        'react/jsx-closing-tag-location': ['warn', 'line-aligned'],
        'react/jsx-curly-brace-presence': ['warn', 'always'],
        'react/jsx-curly-spacing': ['warn', 'always'],
        'react/jsx-equals-spacing': ['warn', 'always'],
        // "react/jsx-first-prop-new-line": ["warn", "multiprop"],
        'react/jsx-first-prop-new-line': 'warn',
        'react/jsx-fragments': ['warn', 'syntax'],
        'react/jsx-handler-names': [
          'warn',
          {
            eventHandlerPrefix: 'handle',
            eventHandlerPropPrefix: 'on',
            checkLocalVariables: false,
            checkInlineFunction: true,
          },
        ],
        'react/jsx-indent': ['warn', 2, { indentLogicalExpressions: true }],
        'react/jsx-indent-props': ['warn', 2],
        'react/jsx-no-constructed-context-values': 'warn',
        'react/jsx-no-useless-fragment': 'error',
        'react/jsx-pascal-case': ['warn', { allowNamespace: true }],
        'react/jsx-props-no-multi-spaces': 'error',
        'react/jsx-props-no-spread-multi': 'error',
        'react/jsx-sort-props': [
          'warn',
          {
            callbacksLast: true,
            shorthandFirst: true,
            ignoreCase: true,
            noSortAlphabetically: false,
          },
        ],
        'react/jsx-wrap-multilines': [
          'warn',
          {
            declaration: 'parens-new-line',
            assignment: 'parens-new-line',
            return: 'parens-new-line',
            arrow: 'parens-new-line',
            condition: 'parens',
            logical: 'parens-new-line',
            prop: 'ignore',
          },
        ],
        'react/no-array-index-key': 'warn',
        'react/no-unstable-nested-components': 'warn',
        'react/react-in-jsx-scope': 'off',
        'react/self-closing-comp': [
          'error',
          {
            component: true,
            html: true,
          },
        ],
      },
    },
  ],
}
module.exports = config
